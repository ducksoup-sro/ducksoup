using System.Linq;
using System.Threading.Tasks;
using API.EventFactory;
using API.Extensions;
using API.Session;
using Database.VSRO188.Context;
using DuckSoup.Library.Session;
using Microsoft.EntityFrameworkCore;
using PacketLibrary.Handler;
using PacketLibrary.VSRO188.Agent.Client;
using PacketLibrary.VSRO188.Agent.Enums.Logout;
using PacketLibrary.VSRO188.Agent.Server;
using Serilog;
using SilkroadSecurityAPI.Message;

namespace DuckSoup.Agent.Vsro;

public class ExploitHandler
{
    public ExploitHandler(IPacketHandler packetHandler)
    {
        // charName modify and not really logged in Exploit - 0x7001 - https://www.elitepvpers.com/forum/sro-pserver-guides-releases/4232366-release-disconnect-players-exploit-found-iwa-4.html 
        packetHandler.RegisterClientHandler<CLIENT_CHARACTER_SELECTION_JOIN_REQUEST>(1, ClientCharacterSelectionJoin);

        // SQL Injection - 0x705E - Also contains Tax / checkout checks - https://www.elitepvpers.com/forum/sro-private-server/4141360-information-sql-injection-ingame.html
        packetHandler.RegisterClientHandler<CLIENT_SIEGE_ACTION>(1, ClientSiegeAction);

        // Guild Notice - 0x70F9 - Better safe than sorry.
        packetHandler.RegisterClientHandler<CLIENT_GUILD_UPDATE_NOTICE>(1, ClientGuildUpdateNotice);

        // Avatar Exploit - 0x34A9 - https://www.elitepvpers.com/forum/sro-pserver-guides-releases/3991992-release-invincible-avatar-magopt-exploit-3.html
        packetHandler.RegisterClientHandler<CLIENT_MAGICOPTION_GRANT>(1, ClientMagicOptionGrant);

        // [x] Crash Exploit - 0x7005 - https://www.elitepvpers.com/forum/sro-pserver-guides-releases/4232366-release-disconnect-players-exploit-found-iwa.html
        packetHandler.RegisterClientHandler<CLIENT_LOGOUT_REQUEST>(1, ClientLogoutRequest);

        // same as above
        packetHandler.RegisterClientHandler<CLIENT_CHARACTER_SELECTION_ACTION_REQUEST>(1,
            ClientCharacterSelectionActionRequest);

        // Zerk Exploit - 0x70A7 - https://www.elitepvpers.com/forum/sro-pserver-guides-releases/3991992-release-invincible-avatar-magopt-exploit-3.html
        packetHandler.RegisterClientHandler<CLIENT_PLAYER_BERSERK>(1, ClientPlayerBerserk);

        // Skill Exploit - 0x70A2 - https://www.maxigame.com/forum/t/251583-meshur-vsro-mastery-exploit-ini-delirius-engelleme
        packetHandler.RegisterClientHandler<CLIENT_SKILL_MASTERY_LEARN_REQUEST>(1, ClientSkillMasteryLearn);

        // Exploit Prevention
        packetHandler.RegisterModuleHandler<SERVER_AUTH_RESPONSE>(1, ServerAuth);
    }
    
    private async Task<Packet> ServerAuth(SERVER_AUTH_RESPONSE data, ISession session)
    {
        session.SetData(Data.CharInfo, new CharInfo());
        session.SetData(Data.EntityInfo, new EntityInfo(session));
        if (data.Result == 0x01)
        {
            session.SetData(Data.UserLoggedIn, true);
            EventFactory.Publish(EventFactoryNames.OnUserAgentLogin, session);
        }

        session.GetData(Data.UserLoggedIn, out var loggedIn, false);
        if (loggedIn)
        {
            session.SetData(Data.CharScreen, true);
            EventFactory.Publish(EventFactoryNames.OnUserJoinCharScreen, session);
        }

        return data;
    }

    private async Task<Packet> ClientSkillMasteryLearn(CLIENT_SKILL_MASTERY_LEARN_REQUEST data, ISession session)
    {
        if (data.Amount == 1) return data;

        session.GetData<ICharInfo?>(Data.CharInfo, out var charInfo, null);
        Log.Warning("EXPLOIT - {0} tried to use SKILL_EXPLOIT - {1:X}", charInfo?.CharName, data.MsgId);
        data.Status = 0x01;
        data.ResultType = PacketResultType.Disconnect;
        return data;
    }

    private async Task<Packet> ClientPlayerBerserk(CLIENT_PLAYER_BERSERK data, ISession session)
    {
        data.TryRead(out byte result);
        if (result == 1) return data;

        session.GetData<ICharInfo?>(Data.CharInfo, out var charInfo, null);
        Log.Information("EXPLOIT - {0} tried to use INVIS EXPLOIT - {1:X}", charInfo?.CharName, data.MsgId);
        data.Status = 0x01;
        data.ResultType = PacketResultType.Disconnect;
        return data;
    }

    private async Task<Packet> ClientCharacterSelectionActionRequest(CLIENT_CHARACTER_SELECTION_ACTION_REQUEST data,
        ISession session)
    {
        session.GetData(Data.CharScreen, out var charScreen, false);
        session.GetData<ICharInfo?>(Data.CharInfo, out var charInfo, null);
        if (!charScreen)
        {
            Log.Warning("Client {0}({1}) attempted to send 0x7007 outside char screen!", charInfo?.CharName,
                data.MsgId);
            data.Status = 0x01;
            data.ResultType = PacketResultType.Disconnect;
            return data;
        }

        if (data.RemainingRead() != 0)
        {
            Log.Warning("Client {0}({1}) attempted to crash SHARD_MANAGER!", charInfo?.CharName, data.MsgId);
            data.Status = 0x01;
            data.ResultType = PacketResultType.Disconnect;
            return data;
        }

        return data;
    }

    private async Task<Packet> ClientLogoutRequest(CLIENT_LOGOUT_REQUEST data, ISession session)
    {
        session.GetData(Data.CharScreen, out var charScreen, false);
        session.GetData<ICharInfo?>(Data.CharInfo, out var charInfo, null);
        if (charScreen)
        {
            Log.Warning("EXPLOIT - {0} tried to use AS_CRASH_EXPLOIT - {1:X} at 1", charInfo?.CharName, data.MsgId);
            data.Status = 0x01;
            data.ResultType = PacketResultType.Disconnect;
            return data;
        }

        session.GetData(Data.CharId, out var charId, 0);
        if (charId <= 0)
        {
            Log.Warning("EXPLOIT - {0} tried to use AS_CRASH_EXPLOIT - {1:X} at 2", charInfo?.CharName, data.MsgId);
            data.Status = 0x01;
            data.ResultType = PacketResultType.Disconnect;
            return data;
        }

        if (data.LogoutMode > LogoutMode.Restart)
        {
            Log.Warning("EXPLOIT - {0} tried to use AS_CRASH_EXPLOIT - {1:X} at 3", charInfo?.CharName, data.MsgId);
            data.Status = 0x01;
            data.ResultType = PacketResultType.Disconnect;
            return data;
        }

        return data;
    }

    private async Task<Packet> ClientMagicOptionGrant(CLIENT_MAGICOPTION_GRANT data, ISession session)
    {
        data.TryRead(out var avatarBlue);
        if (avatarBlue.Contains("avatar")) return data;

        session.GetData<ICharInfo?>(Data.CharInfo, out var charInfo, null);
        Log.Warning("EXPLOIT - {0} tried to use AVATAR_EXPLOIT - {1:X}", charInfo?.CharName, data.MsgId);
        data.Status = 0x01;
        data.ResultType = PacketResultType.Disconnect;
        return data;
    }

    private async Task<Packet> ClientGuildUpdateNotice(CLIENT_GUILD_UPDATE_NOTICE data, ISession session)
    {
        if (!data.Title.Contains('\'') &&
            !data.Title.Contains('\"') &&
            !data.Title.Contains('-') &&
            !data.Text.Contains('\'') &&
            !data.Text.Contains('\"') &&
            !data.Text.Contains('-'))
            return data;

        session.GetData<ICharInfo?>(Data.CharInfo, out var charInfo, null);
        Log.Warning(
            "EXPLOIT - {0} tried to use GUILD_SQL_INJECTION, this can happen accidentally, fixing the packet - no disconnect - {1:X}",
            charInfo?.CharName, data.MsgId);
        data.Status = 0x01;
        await session.SendNotice(
            "You're not allowed to use special characters in this textfield. We've replaced them for you.");

        data.Text = data.Text
            .Replace('\'', ' ').Replace('-', ' ').Replace('\"', ' ').Replace(';', ' ');
        data.Title = data.Title
            .Replace('\'', ' ').Replace('-', ' ').Replace('\"', ' ')
            .Replace(';', ' ');
        return data;
    }

    private async Task<Packet> ClientSiegeAction(CLIENT_SIEGE_ACTION data, ISession session)
    {
        data.TryRead(out uint uUnk0)
            .TryRead(out byte bUnk0);
        uint uUnk1 = 0;
        if (bUnk0 == 1 || bUnk0 == 2 || bUnk0 == 26) data.TryRead(out uUnk1);

        // About guild
        if (bUnk0 != 26 || uUnk1 != 1) return data;

        data.TryRead(out var message);
        if (!message.Contains('\'') && !message.Contains('"') && !message.Contains('-')) return data;

        session.GetData<ICharInfo?>(Data.CharInfo, out var charInfo, null);
        Log.Warning("EXPLOIT - {0} tried to use FW_SQL_INJECTION this can happen accidentally - no disconnect - {1:X}",
            charInfo?.CharName, data.MsgId);
        data.Status = 0x01;
        data.ResultType = PacketResultType.Block;
        await session.SendNotice("You're not allowed to use special characters in this textfield.");
        return data;
    }

    private async Task<Packet> ClientCharacterSelectionJoin(CLIENT_CHARACTER_SELECTION_JOIN_REQUEST data,
        ISession session)
    {
        session.GetData(Data.CharNameSent, out var charNameSent, false);
        if (charNameSent)
        {
            // this can happen twice, we block it once we've received the charName
            data.Status = 0x01;
            data.ResultType = PacketResultType.Block;
            return data;
        }

        session.GetData(Data.CharScreen, out var charScreen, false);
        if (!charScreen)
        {
            Log.Warning("Client {0}({1}) attempted to send 0x7001 outside char screen!",
                session.Guid, session.RemoteEndPoint.Address.ToString());
            data.Status = 0x01;
            data.ResultType = PacketResultType.Disconnect;
            return data;
        }

        if (data.RemainingRead() != 0)
        {
            Log.Warning("Client {0}({1})attempted to modify 0x7001!", session.Guid,
                session.RemoteEndPoint.Address.ToString());
            data.Status = 0x01;
            data.ResultType = PacketResultType.Disconnect;
            return data;
        }

        session.GetData<ICharInfo?>(Data.CharInfo, out var charInfo, null);
        charInfo.CharName = data.Name;
        session.SetData(Data.CharNameSent, true);
        EventFactory.Publish(EventFactoryNames.OnUserCharnameSent, session);

        await using var db = new SRO_VT_SHARD();
        var charId = (await db._Chars.Where(x => x.CharName16 == data.Name).FirstAsync()).CharID;
        var jid = (await db._Users.Where(x => x.CharID == charId).FirstAsync()).UserJID;
        session.SetData(Data.CharId, charId);
        charInfo.Jid = (uint)jid;
        return data;
    }
}